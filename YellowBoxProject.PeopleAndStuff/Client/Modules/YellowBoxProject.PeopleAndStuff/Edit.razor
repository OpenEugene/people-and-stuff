@using Oqtane.Modules.Controls
@using YellowBoxProject.PeopleAndStuff.Services
@using YellowBoxProject.PeopleAndStuff.Models

@namespace YellowBoxProject.PeopleAndStuff
@inherits ModuleBase
@inject IPeopleAndStuffService PeopleAndStuffService
@inject NavigationManager NavigationManager
@inject IStringLocalizer<Edit> Localizer

<form @ref="form" class="@(validated ? "was-validated" : "needs-validation")" novalidate>
<table class="table table-borderless">
    <tr>
        <td>
            <Label For="name" HelpText="Enter a name" ResourceKey="Name">Name: </Label>
        </td>
        <td>
            <input id="name" class="form-control" @bind="@_name" required />
        </td>
    </tr>
</table>
<button type="button" class="btn btn-success" @onclick="Save">@Localizer["Save"]</button>
<NavLink class="btn btn-secondary" href="@NavigateUrl()">@Localizer["Cancel"]</NavLink>
<br /><br />
@if (PageState.Action == "Edit")
{
    <AuditInfo CreatedBy="@_createdby" CreatedOn="@_createdon" ModifiedBy="@_modifiedby" ModifiedOn="@_modifiedon"></AuditInfo>
}
</form>

@code {
    public override SecurityAccessLevel SecurityAccessLevel => SecurityAccessLevel.Edit;

    public override string Actions => "Add,Edit";

    public override string Title => "Manage PeopleAndStuff";

    public override List<Resource> Resources => new List<Resource>()
    {
        new Resource { ResourceType = ResourceType.Stylesheet, Url = ModulePath() + "Module.css" }
    };

    private ElementReference form;
    private bool validated = false;

    private int _id;
    private string _name;
    private string _createdby;
    private DateTime _createdon;
    private string _modifiedby;
    private DateTime _modifiedon;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (PageState.Action == "Edit")
            {
                _id = Int32.Parse(PageState.QueryString["id"]);
                PeopleAndStuff PeopleAndStuff = await PeopleAndStuffService.GetPeopleAndStuffAsync(_id, ModuleState.ModuleId);
                if (PeopleAndStuff != null)
                {
                    _name = PeopleAndStuff.Name;
                    _createdby = PeopleAndStuff.CreatedBy;
                    _createdon = PeopleAndStuff.CreatedOn;
                    _modifiedby = PeopleAndStuff.ModifiedBy;
                    _modifiedon = PeopleAndStuff.ModifiedOn;
                }
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Loading PeopleAndStuff {PeopleAndStuffId} {Error}", _id, ex.Message);
            AddModuleMessage(Localizer["Message.LoadError"], MessageType.Error);
        }
    }

    private async Task Save()
    {
        try
        {
            validated = true;
            var interop = new Oqtane.UI.Interop(JSRuntime);
            if (await interop.FormValid(form))
            {
                if (PageState.Action == "Add")
                {
                    PeopleAndStuff PeopleAndStuff = new PeopleAndStuff();
                    PeopleAndStuff.ModuleId = ModuleState.ModuleId;
                    PeopleAndStuff.Name = _name;
                    PeopleAndStuff = await PeopleAndStuffService.AddPeopleAndStuffAsync(PeopleAndStuff);
                    await logger.LogInformation("PeopleAndStuff Added {PeopleAndStuff}", PeopleAndStuff);
                }
                else
                {
                    PeopleAndStuff PeopleAndStuff = await PeopleAndStuffService.GetPeopleAndStuffAsync(_id, ModuleState.ModuleId);
                    PeopleAndStuff.Name = _name;
                    await PeopleAndStuffService.UpdatePeopleAndStuffAsync(PeopleAndStuff);
                    await logger.LogInformation("PeopleAndStuff Updated {PeopleAndStuff}", PeopleAndStuff);
                }
                NavigationManager.NavigateTo(NavigateUrl());
            }
            else
            {
                AddModuleMessage(Localizer["Message.SaveValidation"], MessageType.Warning);
            }
        }
        catch (Exception ex)
        {
            await logger.LogError(ex, "Error Saving PeopleAndStuff {Error}", ex.Message);
            AddModuleMessage(Localizer["Message.SaveError"], MessageType.Error);
        }
    }
}
